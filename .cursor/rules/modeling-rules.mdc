---
description: 
globs: docs/*.*
alwaysApply: false
---
Rule Name: modeling-rules
Description: DDDとTDDに基づいたモデリングルール
# 目的
*   ドメインの主要概念、関係性、ビジネスルールを明確化し、思考を整理する。
*   コード実装における一貫性を担保する。
*   UMLクラス図で表現する。

# モデリング原則
- **ドメイン中心**: ビジネスドメインの概念を忠実に表現する。
- **ユビキタス言語**: 設計とコードで一貫した用語を使用する。
- **境界づけられたコンテキスト**: ドメインを明確な境界で区切る。
- **テスト容易性**: モデルがテストしやすいように設計する。

# 各図の作成ルール
## 共通
- UMLを用いて表現。
- ユビキタス言語、ドメイン要素（集約、エンティティ、値オブジェクト、境界づけられたコンテキスト）の特定を目標とする。
- 資料の修正を行った場合、修正したファイル以外を確認し、必要であれば該当ファイルの修正を行う。

## システム関連図
- 主要システムと連携を明確化。
- データフローと主要IFを示す。

## ユーザーストーリー図
- *<役割>として、<機能>したい。なぜなら<理由>のため。*という形で記述。
- INVEST(Independent, Negotiable, Valuable, Estimable, Small, Testable)に従って記述。
- 役割: ユーザーの種類や役割を定義。
- 機能: ユーザーがシステムで達成したい目標。
- 理由: その機能がユーザーにとってなぜ価値があるかを説明。

## イベントストーミングマップ

### 作成フロー
1.  **ドメインイベントの洗い出し**:
    -   ビジネス上重要な出来事（ドメインイベント）を過去形で記述します。
    -   例：「商品が注文された」「顧客が登録された」

2.  **ドメインイベントの時系列配置と精査**:
    -   洗い出されたドメインイベントを時間軸に沿って配置します。
    -   重複しているイベント、表現の揺れなどを整理・統一します。
    -   イベントの抜け漏れがないか確認し、必要であれば追加します。

3.  **コマンドとアクターの特定**:
    -   各ドメインイベントに対して、それを引き起こしたコマンド（命令）と、コマンドを実行したアクター（人やシステム）を特定し、記述して配置します。
    -   コマンドは命令形で記述します。例：「商品を注文する」
    -   アクターの例：「顧客」「管理者」

4.  **ポリシー/ビジネスルールの追加**:
    -   特定のドメインイベントが発生した際に、別のコマンドをトリガーする条件やルール（ポリシー）を特定し、記述して配置します。
    -   例：「もし在庫が不足していれば」「注文後24時間以内に」

5.  **ビュー/リードモデルの明確化**:
    -   アクターがコマンドを実行するために参照する情報（ビュー、リードモデル）を特定し、記述して配置します。
    -   例：「商品一覧画面」「注文詳細画面」

6.  **集約の抽出**:
    -   関連するドメインイベントやコマンド、データをまとめ、一貫性を保つ単位となる集約を特定し、境界を明確にします。
    -   例：「注文集約」「商品集約」

7.  **外部システムの識別**:
    -   プロセスに関わる外部システムがあれば特定し、記述して配置します。
    -   例：「決済システム」「配送システム」

8. **ウォークスルーと改善**:
    -   #### 確認事項セクションを確認します。
    -   作成したイベントストーミングマップ全体を見直し、認識の齟齬がないか、ビジネスプロセスが正しく表現されているかを確認します。
    -   必要に応じて修正、改善を行います。

### 要素
イベントストーミングで使用される主要な要素は以下の通りです。MermaidのClassDiagramで表現する際は、`style`キーワードを用いて要素の種類を視覚的に区別することができます。

### ドメインイベント (Domain Event):
 - ビジネスドメインで発生した重要な出来事を表します。
 - 過去形で記述します。（例: `商品がカートに追加された`）
 - ドメインイベントのみ、ターゲットを1つ以上持つことができます。
 - Mermaidでの表現例: `style DomainEvent fill:#fca,stroke:#333,stroke-width:2px` (オレンジ系)

### コマンド (Command):
 - ドメインイベントを発生させるためのユーザーのアクションやシステムの命令を表します。
 - 動詞の命令形で記述します。（例: `商品をカートに追加する`）
 - Mermaidでの表現例: `style Command fill:#ccf,stroke:#333,stroke-width:2px` (青系)

### アクター (Actor) / ユーザー (User):
 - コマンドを実行する人、役割、または外部システムを表します。（例: `顧客`、`システム管理者`）
 - Mermaidでの表現例: `style Actor fill:#ffc,stroke:#333,stroke-width:1px,font-size:12px` (黄色系)

### 集約 (Aggregate):
 - 一貫性の境界となる、関連するエンティティと値オブジェクトのまとまりを表します。（例: `注文`、`商品`）
 - Mermaidでの表現例: `style Aggregate fill:#ff9,stroke:#333,stroke-width:2px,font-weight:bold` (黄色系、太字など)

### ポリシー (Policy) / ビジネスルール (Business Rule):
 - 特定のドメインイベントに応じて自動的に実行されるビジネスルールや反応を表します。「もし〜ならば、〜する」という形式で記述されることが多いです。（例: `もし注文が確定したら、在庫引当を行う`）
 - Mermaidでの表現例: `style Policy fill:#fcf,stroke:#333,stroke-width:2px` (薄紫色系)

### ビュー (View) / リードモデル (Read Model):
 - ユーザーが意思決定を行うために参照する情報や画面を表します。（例: `商品詳細画面`、`マイページ`）
 - Mermaidでの表現例: `style View fill:#cfc,stroke:#333,stroke-width:2px` (緑色系)

### 外部システム (External System):
 - 連携する外部のシステムやサービスを表します。（例: `決済ゲートウェイ`、`配送API`）
 - Mermaidでの表現例: `style ExternalSystem fill:#fcc,stroke:#333,stroke-width:2px` (ピンク色系)
  
### ホットスポット (Hot Spot) / 課題 (Issue) / 疑問 (Question):
 - 議論中に明らかになった懸念事項、未解決の問題、疑問点、重要な仮定などを記録します。
 - ホットスポットはいつでも定義することができます。
 - ホットスポットのターゲットは内容が関連する要素に向けます。
 - Mermaidでの表現例: `note for example "ノート<br>長ければ改行。"`

### 要点
 - **言語の統一**: ユビキタス言語を意識し、用語の定義を統一するよう努めます。
 - **疑問や懸念は都度記録**: 途中で生じた疑問や懸念点は、「ホットスポット」として記録し、後で検討できるようにします。
 - **成果物の活用**: 作成したイベントストーミングマップは、ドメイン理解の深化、要求定義、システム設計、テストケース作成など、後続の様々な活動に活用します。

### ルール
#### Mermaid記述時のルール
- ClassDiagramで記述します。
- ホットスポットは最下部にまとめて定義します。
- 1ノードを1Classで表現します。
- `「ビュー/リードモデル」から「ドメインイベント」`もしくは`「ポリシー」から「ドメインイベント」`までを一つのノードとして定義します。
- 一つのノードが格納できるノードは最大5つまでです。
- ノードの名称はそれが表す概念を与えます。
- 境界づけられたコンテキストごとに`namespace`で囲みます。
- namespaceにはclassのみを入れます。
- 関係の定義などはnamespaceの外に記述します。

#### 確認事項
**すべてのノードに対し以下のことを確認**
- ノードの属性は`「ビュー/リードモデル」「アクター」「コマンド」「外部システム/集約」「ドメインイベント」`もしく`「ポリシー」「コマンド」「外部システム/集約」「ドメインイベント」`となっているか？

## ドメインモデル図
### 主要構成要素
- **エンティティ (Entity):** 識別子を持つオブジェクト (例: `ユーザー:User`)。
- **値オブジェクト (Value Object):** 属性で記述され、不変なオブジェクト (例: `メールアドレス:EmailAddress`)。
- **集約 (Aggregate):** 関連するエンティティと値オブジェクトのまとまり。整合性の単位。
- **関連 (Association):** 要素間の関係性 (多重度含む)。
- **ドメイン知識/ルール:** ノート（吹き出し）で図中に明記。

### 作成手順
1. **ユビキタス言語の定義:** プロジェクトで使う共通言語（日本語:英語）を定める。
2. **主要要素の洗い出し:** エンティティ、値オブジェクトを特定する。
3. **関連と集約の定義:** 要素間の関連性を定義し、必要に応じて集約でグループ化する。
4. **ビジネスルールの記述:** 重要な制約やルールをノートで書き出す。
5. **ドメインイベントの考慮(任意):** 主要な出来事（例: `ユーザー登録完了:UserRegistered`）を意識し、必要ならノートで補足する。

### 記述ルール
- **命名:** 表示名は `英語: 日本語` (例: `Stock: 在庫`)。
- **メソッド省略:** 属性と関連を中心に記述。メソッドは不要。
- **シンプルさ重視:** 小規模なので、複雑な構造は避ける。

### UMLルール
- 集約はnamespaceで囲んで表現する。
  - その際、noteをnamespace内に入れないこと。（エラーとなるため）
- noteは20文字を目安に `<br>` タグで改行すること。
- noteのプレーンテキスト上での記述箇所は最下部とすること。

#### エンティティ記述例
- 表示名は `"(Entity)English: 日本語"` で表す。
- 属性は `English: 日本語` で表す。
``` mermaid
classDiagram
  namespace ItemAggregate {
    class Item["(Entity)Item: アイテム"] {
      ItemId: アイテムID
      Price: 価格
    }
  }

  class Order["(Entity)Stock: 在庫"] {
    StockId: 在庫ID
    Price: 価格
    QuantityAvailable: 在庫数
    Status: ステータス
  }

  note for Order "初期作成時、ステータスは「販売中」となる。<br>在庫数が0の時は在庫切れ。"
```

#### 値オブジェクト記述例
- 表示名は `"(Value)English: 日本語"` で表す。
- 値オブジェクトの内容が値オブジェクトであればエンティティと同様に `English: 日本語` で表す。
- 値オブジェクトの内容が値オブジェクトで以外であれば `value: 内容物の型` で表す。
- 列挙型の値オブジェクトは `<<enumeration>>` を記述した上で `English: 日本語` で表す"
``` mermaid
classDiagram
  class ItemId["(Value)ItemId: アイテムID"] {
    value: string
  }
  
  class StockId["(Value)StockId: 在庫ID"] {
    value: string
  }

  class QuantityAvailable["(Value)QuantityAvailable: 在庫数"] {
    value: number
  }

  class Price["(Value)Price: 価格"] {
    value: number
  }

  class Color["(Value)Status: ステータス"]{
    <<enumeration>>
    PreSale: 販売前
    OnSale: 販売中
    Discontinued: 販売停止
  }

  note for StockId "12桁で0埋め。"
  note for QuantityAvailable "MAX = 1,000,000<br>MIN = 1"
  note for Price "日本円のみ扱う。<br>MAX = 1,000,000<br>MIN = 1"
```

### 確認ポイント
- **過度な結合はないか？** (変更しづらくないか)
- **ユビキタス言語は一貫しているか？**
- **重要なビジネスルールは表現されているか？**
- **将来の拡張性は考慮されているか？** (小さく始めて育てられるか)










